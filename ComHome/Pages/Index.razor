@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using ComHome.Data
@inject NavigationManager NavigationManager
@inject CHClientService ClientService
@implements IAsyncDisposable

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>
<button @onclick="Request" disabled="@(!IsConnected)">Request</button>
<button @onclick="Get5" disabled="@(!IsConnected)">Get 5</button>
<button @onclick="GetHist" disabled="@(!IsConnected)">Get 5</button>

<hr>

<ul id="messagesList">
    @foreach(var message in messages) {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string userInput;
    private string messageInput;

    protected override async Task OnInitializedAsync() {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) => {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });
        hubConnection.On<string[]>("BigDataMessage", (arr) => {
            if(arr.Length > 0) {
                foreach(string s in arr) {
                    messages.Add($"server say: {s}");
                }
            }
            StateHasChanged();
        });

        var data = ClientService.GetSomeData();

        await hubConnection.StartAsync();
    }

    async Task Send() =>
        await hubConnection.SendAsync("SendMessage", userInput, messageInput);
    async Task Request() =>
        await hubConnection.SendAsync("GetBigData");
    async Task Get5() {
        int res = await ClientService.GetSomeData();
        messages.Add(res.ToString());
        StateHasChanged();
    }
    async Task GetHist() {
        string res = await ClientService.GetHistorical();
        messages.Add(res.ToString());
        StateHasChanged();
    }

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync() {
        if(hubConnection is not null) {
            await hubConnection.DisposeAsync();
        }
    }
}